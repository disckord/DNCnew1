package net.minecraft.src;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import org.lwjgl.opengl.GL11;

public class WorldRenderer
{ private static Tessellator tessellator = Tessellator.instance;

	 private TesselatorVertexState vertexState = null;

    /** Reference to the World object. */
    public World worldObj;
    protected int glRenderList = -1;
    public static volatile int chunksUpdated = 0;
    public int posX;
    public int posY;
    public int posZ;

    /** Pos X minus */
    public int posXMinus;

    /** Pos Y minus */
    public int posYMinus;

    /** Pos Z minus */
    public int posZMinus;

    /** Pos X clipped */
    public int posXClip;

    /** Pos Y clipped */
    public int posYClip;

    /** Pos Z clipped */
    public int posZClip;
    public boolean isInFrustum = false;

    /** Should this renderer skip this render pass */
    public boolean[] skipRenderPass = new boolean[2];

    /** Pos X plus */
    public int posXPlus;

    /** Pos Y plus */
    public int posYPlus;

    /** Pos Z plus */
    public int posZPlus;

    /** Boolean for whether this renderer needs to be updated or not */
    public volatile boolean needsUpdate;

    /** Axis aligned bounding box */
    public AxisAlignedBB rendererBoundingBox;

    /** Chunk index */
    public int chunkIndex;

    /** Is this renderer visible according to the occlusion query */
    public boolean isVisible = true;

    /** Is this renderer waiting on the result of the occlusion query */
    public boolean isWaitingOnOcclusionQuery;

    /** OpenGL occlusion query */
    public int glOcclusionQuery;

    /** Is the chunk lit */
    public boolean isChunkLit;
    protected boolean isInitialized = false;

    /** All the tile entities that have special rendering code for this chunk */
    public List tileEntityRenderers = new ArrayList();
    protected List tileEntities;

    /** Bytes sent to the GPU */
    protected int bytesDrawn;
    public boolean isVisibleFromPosition = false;
    public double visibleFromX;
    public double visibleFromY;
    public double visibleFromZ;
    public boolean isInFrustrumFully = false;
    protected boolean needsBoxUpdate = false;
    public volatile boolean isUpdating = false;
    public static int globalChunkOffsetX = 0;
    public static int globalChunkOffsetZ = 0;

    public WorldRenderer(World par1World, List par2List, int par3, int par4, int par5, int par6)
    {
        this.worldObj = par1World;
        this.tileEntities = par2List;
        this.glRenderList = par6;
        this.posX = -999;
        this.setPosition(par3, par4, par5);
        this.needsUpdate = false;
    }

    /**
     * Sets a new position for the renderer and setting it up so it can be reloaded with the new data for that position
     */
    public void setPosition(int par1, int par2, int par3)
    {
        if (par1 != this.posX || par2 != this.posY || par3 != this.posZ)
        {
            this.setDontDraw();
            this.posX = par1;
            this.posY = par2;
            this.posZ = par3;
            this.posXPlus = par1 + 8;
            this.posYPlus = par2 + 8;
            this.posZPlus = par3 + 8;
            this.posXClip = par1 & 1023;
            this.posYClip = par2;
            this.posZClip = par3 & 1023;
            this.posXMinus = par1 - this.posXClip;
            this.posYMinus = par2 - this.posYClip;
            this.posZMinus = par3 - this.posZClip;
            float var4 = 0.0F;
            this.rendererBoundingBox = AxisAlignedBB.getBoundingBox((double)((float)par1 - var4), (double)((float)par2 - var4), (double)((float)par3 - var4), (double)((float)(par1 + 16) + var4), (double)((float)(par2 + 16) + var4), (double)((float)(par3 + 16) + var4));
            this.needsBoxUpdate = true;
            this.markDirty();
            this.isVisibleFromPosition = false;
        }
    }

    private void setupGLTranslation()
    {
        GL11.glTranslatef((float)this.posXClip, (float)this.posYClip, (float)this.posZClip);
    }
    public void updateRendererSort(EntityLiving p_147889_1_)
    {
        if (this.vertexState != null && !this.skipRenderPass[1])
        {
            this.preRenderBlocks(1);
            tessellator.setVertexState(this.vertexState);
            this.postRenderBlocks(1, p_147889_1_);
        }
    }
    /**
     * Will update this chunk renderer
     */
    public void updateRenderer(EntityLiving p_147892_1_)
    {
        if (this.needsUpdate)
        {
            this.needsUpdate = false;
            int var2 = this.posX;
            int var3 = this.posY;
            int var4 = this.posZ;
            int var5 = this.posX + 16;
            int var6 = this.posY + 16;
            int var7 = this.posZ + 16;

            for (int renderPass = 0; renderPass < 2; ++renderPass)
            {
            	
                this.skipRenderPass[renderPass] = true;
            }

            Chunk.isLit = false;
            HashSet var26 = new HashSet();
            var26.addAll(this.tileEntityRenderers);
            this.tileEntityRenderers.clear();
            //Minecraft var9 = Minecraft.getMinecraft();
            //EntityLivingBase var10 = var9.renderViewEntity;
           /* int var11 = MathHelper.floor_double(var10.posX);
            int var12 = MathHelper.floor_double(var10.posY);
            int var13 = MathHelper.floor_double(var10.posZ);*/
            byte var14 = 1;
            ChunkCache chunkCache = new ChunkCache(this.worldObj, var2 - var14, var3 - var14, var4 - var14, var5 + var14, var6 + var14, var7 + var14, var14);

            if (!chunkCache.extendedLevelsInChunkCache())
            {
                ++chunksUpdated;
                RenderBlocks renderBlocks = new RenderBlocks(chunkCache);
                this.bytesDrawn = 0;
                this.vertexState = null;
                	
                for (int renderPass = 0; renderPass < 2; ++renderPass)
                {
                    boolean skipPass = false;
                    boolean hasRendered = false;
                    boolean hasPreRendered = false;

                    for (int y = var3; y < var6; ++y)
                        for (int z = var4; z < var7; ++z)
                            for (int x = var2; x < var5; ++x)
                            {
                                Block currentBlock = Block.blocksList[chunkCache.getBlockId(x, y, z)];

                                if (currentBlock.blockID != 0)
                                {
                                    if (!hasPreRendered)
                                    {
                                        hasPreRendered = true;
                                        this.preRenderBlocks(renderPass);
                                    }

                                    if (renderPass == 0 && currentBlock.hasTileEntity())
                                    {
                                        TileEntity var25 = chunkCache.getBlockTileEntity(x, y, z);

                                        if (TileEntityRenderer.instance.hasSpecialRenderer(var25))
                                        {
                                            this.tileEntityRenderers.add(var25);
                                        }
                                    }

                                    int currentRenderBlockPass = currentBlock.getRenderBlockPass();

                                    if (currentRenderBlockPass > renderPass)
                                    {
                                        skipPass = true;
                                    }
                                    else if (currentRenderBlockPass == renderPass)
                                    {
                                        hasRendered |= renderBlocks.renderBlockByRenderType(currentBlock, x, y, z);

                                       /* if (currentBlock.getRenderType() == 0 && x == var11 && y == var12 && z == var13)
                                        {
                                            renderBlocks.setRenderFromInside(true);
                                            renderBlocks.setRenderAllFaces(true);
                                            renderBlocks.renderBlockByRenderType(currentBlock, x, y, z);
                                            renderBlocks.setRenderFromInside(false);
                                            renderBlocks.setRenderAllFaces(false);
                                        }*/
                                    }
                                }
                            }
                    if (hasRendered)
                    {
                        this.skipRenderPass[renderPass] = false;
                    }

                    if (hasPreRendered)
                    {
                        this.postRenderBlocks(renderPass, p_147892_1_);
                    }
                    else
                    {
                        hasRendered = false;
                    }

                    if (!skipPass)
                    {
                        break;
                    }
                }
            }

            HashSet var27 = new HashSet();
            var27.addAll(this.tileEntityRenderers);
            var27.removeAll(var26);
            this.tileEntities.addAll(var27);
            var26.removeAll(this.tileEntityRenderers);
            this.tileEntities.removeAll(var26);
            this.isChunkLit = Chunk.isLit;
            this.isInitialized = true;
        }
    }
    private void preRenderBlocks(int renderPass)
    {
        GL11.glNewList(this.glRenderList + renderPass, GL11.GL_COMPILE);
        GL11.glPushMatrix();
        this.setupGLTranslation();
        float var2 = 1.000001F;
        GL11.glTranslatef(-8.0F, -8.0F, -8.0F);
        GL11.glScalef(var2, var2, var2);
        GL11.glTranslatef(8.0F, 8.0F, 8.0F);
        tessellator.startDrawingQuads();
        tessellator.setTranslation((double)(-this.posX), (double)(-this.posY), (double)(-this.posZ));
    }

    private void postRenderBlocks(int renderPass, EntityLiving viewEntity)
    {
        if (renderPass == 1 && !this.skipRenderPass[renderPass])
        {
            this.vertexState = tessellator.getVertexState((float)viewEntity.posX, (float)viewEntity.posY, (float)viewEntity.posZ);
        }

        this.bytesDrawn += tessellator.draw();
        GL11.glPopMatrix();
        GL11.glEndList();
        tessellator.setTranslation(0.0D, 0.0D, 0.0D);
    }
    /**
     * Returns the distance of this chunk renderer to the entity without performing the final normalizing square root,
     * for performance reasons.
     */
    public float distanceToEntitySquared(Entity par1Entity)
    {
        float var2 = (float)(par1Entity.posX - (double)this.posXPlus);
        float var3 = (float)(par1Entity.posY - (double)this.posYPlus);
        float var4 = (float)(par1Entity.posZ - (double)this.posZPlus);
        return var2 * var2 + var3 * var3 + var4 * var4;
    }

    /**
     * When called this renderer won't draw anymore until its gets initialized again
     */
    public void setDontDraw()
    {
        for (int var1 = 0; var1 < 2; ++var1)
        {
            this.skipRenderPass[var1] = true;
        }

        this.isInFrustum = false;
        this.isInitialized = false;
    }

    public void stopRendering()
    {
        this.setDontDraw();
        this.worldObj = null;
    }

    /**
     * Takes in the pass the call list is being requested for. Args: renderPass
     */
    public int getGLCallListForPass(int par1)
    {
        return !this.isInFrustum ? -1 : (!this.skipRenderPass[par1] ? this.glRenderList + par1 : -1);
    }

    public void updateInFrustum(ICamera par1ICamera)
    {
        this.isInFrustum = par1ICamera.isBoundingBoxInFrustum(this.rendererBoundingBox);

        if (this.isInFrustum && Config.isOcclusionEnabled() && Config.isOcclusionFancy())
        {
            this.isInFrustrumFully = par1ICamera.isBoundingBoxInFrustumFully(this.rendererBoundingBox);
        }
        else
        {
            this.isInFrustrumFully = false;
        }
    }

    /**
     * Renders the occlusion query GL List
     */
    public void callOcclusionQueryList()
    {
        GL11.glCallList(this.glRenderList + 2);
    }

    /**
     * Checks if all render passes are to be skipped. Returns false if the renderer is not initialized
     */
    public boolean skipAllRenderPasses()
    {
        return !this.isInitialized ? false : this.skipRenderPass[0] && this.skipRenderPass[1];
    }

    /**
     * Marks the current renderer data as dirty and needing to be updated.
     */
    public void markDirty()
    {
        this.needsUpdate = true;
    }
}
